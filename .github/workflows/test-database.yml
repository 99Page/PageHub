# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Google Cloud Setup

on:
  push:
    branches:
      - 'chore/**'  # chore/ 하위 브랜치에 푸시될 때 실행

jobs:
  build:
    runs-on: macos-latest
    env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        FIREBASE_SERVICE_KEY: ${{ secrets.FIREBASE_SERVICE_KEY }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        
        FIRESTORE_TEST_SNIPPETS_COLLECTION: ${{ secrets.FIRESTORE_TEST_SNIPPETS_COLLECTION }}
        FIRESTORE_CODEDETAILS_DOCUMENT: ${{ secrets.FIRESTORE_CODEDETAILS_DOCUMENT }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Install required SDKs
      uses: ./.github/actions/install-sdk
      with:
        GOOGLE_CLOUD_SERVICE_KEY: ${{ secrets.PAGEHUB_SERVICE }}
        FIREBASE_SERVICE_KEY: ${{ secrets.FIREBASE_SERVICE_KEY }}

    - name: Configure
      run: |
        git fetch origin main
        MIN_IOS_VERSION=$(grep -o '.iOS(.*)' Project.swift | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
        echo "MIN_IOS_VERSION=$MIN_IOS_VERSION" >> $GITHUB_ENV

        CHANGED_FILES=$(git diff --name-only origin/main $GITHUB_SHA | grep "^PageHub/Sources/Snippet")
        
        # Github actions에서는 Bash 스타일 변수를 with에 사용할 수 없다.
        # $ {{ }} 문법 형태를 사용해야해서, env에 저장 후 사용한다. 
        echo "$CHANGED_FILES"
        echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
        echo "$CHANGED_FILES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        ACCESS_TOKEN=$(./google-cloud-sdk/bin/gcloud auth print-access-token)
        echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
        
        echo "FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID" >> $GITHUB_ENV
        echo "FIRESTORE_TEST_SNIPPETS_COLLECTION=$FIRESTORE_TEST_SNIPPETS_COLLECTION" >> $GITHUB_ENV
        echo "FIRESTORE_CODEDETAILS_DOCUMENT=$FIRESTORE_CODEDETAILS_DOCUMENT" >> $GITHUB_ENV

    - name: Call 
      uses: ./.github/actions/upload-to-firestore
      with:
        FILES: ${{ env.CHANGED_FILES }}

    - name: Update Firestore with Modified Snippets
      run: |
        git fetch origin main
        
        # 버전 형식을 다음처럼 추출합니다. "18.0.0"
        MIN_IOS_VERSION=$(grep -o '.iOS(.*)' Project.swift | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
        echo "MIN IOS VERSION=$MIN_IOS_VERSION" >> $GITHUB_ENV
        
        # Snippet 하위의 변경된 파일들만 확인
        CHANGED_FILES=$(git diff --name-only origin/main $GITHUB_SHA | grep "^PageHub/Sources/Snippet")
        echo "Changed files: $CHANGED_FILES"

        # 변경된 파일 모두 찾아가서 내부 코드를 출력하며, //로 시작하는 주석 제거
        for FILE in $CHANGED_FILES; do
          if [ -f "$FILE" ]; then
            echo "Contents of $FILE without comments:"

            # 마지막 슬래시(/) 이전까지의 경로를 추출하고, 첫 글자를 소문자로 변환
            DOCUMENT=$(echo "$FILE" | sed -E 's|.*/||; s|\.swift$||' | awk '{print tolower(substr($0,1,1)) substr($0,2)}')
            echo "document name is $DOCUMENT"

            # 변경된 파일에서 주석 처리된 라인 제거 후 환경변수에 저장
            CODE=$(sed '/^\/\//d' "$FILE")

            # GET 및 PATCH 요청에 사용하는 URL
            FIRESTORE_READ_UPDATE_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/$FIRESTORE_TEST_SNIPPETS_COLLECTION/$DOCUMENT/$MIN_IOS_VERSION/$FIRESTORE_CODEDETAILS_DOCUMENT"

            # POST 요청에 사용하는 URL
            FIRESTORE_CREATE_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/$FIRESTORE_TEST_SNIPPETS_COLLECTION/$DOCUMENT/$MIN_IOS_VERSION?documentId=$FIRESTORE_CODEDETAILS_DOCUMENT"

            # Firestore에서 문서가 존재하는지 확인
            RESPONSE=$(curl -s \
              -o /dev/null \
              -w "%{http_code}" \
              -H "Authorization: Bearer $(./google-cloud-sdk/bin/gcloud auth print-access-token)"\
              "$FIRESTORE_READ_UPDATE_URL")

            echo "응답: $RESPONSE"

            if [ "$RESPONSE" -eq 200 ]; then
              # 문서가 존재하면 PATCH 요청
              curl -X PATCH \
              -H "Authorization: Bearer $(./google-cloud-sdk/bin/gcloud auth print-access-token)"\
              -H "Content-Type: application/json" \
              "$FIRESTORE_READ_UPDATE_URL" \
              -d '{
                "fields": {
                  "code": {
                    "stringValue": "'"${CODE}"'"
                  }
                }
              }' || exit 1

              echo "Document updated with PATCH."

            else
              # 문서가 존재하지 않으면 POST 요청
              curl -X POST \
              -H "Authorization: Bearer $(./google-cloud-sdk/bin/gcloud auth print-access-token)"\
              -H "Content-Type: application/json" \
              "$FIRESTORE_CREATE_URL" \
              -d '{
                "fields": {
                  "code": {
                    "stringValue": "'"${CODE}"'"
                  }
                }
              }' || exit 1

              echo "Document created with POST."
            fi
          else

          echo "File $FILE does not exist."

        fi
        done

    - name: Update Firestore with Features
      run: |
        for key in $keys; do
          value=$(jq -r --arg k "$key" '.[$k]' PageHub/Resources/feature_snippets_mapping.json)
          echo "Key: $key"
          echo "Value: $value"

          FIRESTORE_READ_FEATURE_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/$FIRESTORE_TEST_SNIPPETS_COLLECTION$DOCUMENT/$MIN_IOS_VERSION/$FIRESTORE_CODEDETAILS_DOCUMENT"
        done
