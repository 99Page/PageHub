name: "Set Up Snippet ID to GITHUB_ENV"
description: "Stores the ID value required for API calls in GITHUB_ENV."
inputs:
  FILES:
    description: "A one-line string containing file paths to upload to Firestore, separated by backslashes."
    example: "PageHub/A.swift\PageHub/B.swift"
    required: true 
  USE_TEST_COLLECTION:
    description: "Value needed to distinguish the snippet ID suffix. Accepts 'y' or 'n'."
    required: true

runs:
  using: "composite"
  steps:
    - name: Set Up Snippet ID to GITHUB_ENV
      shell: bash
      env:
        ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
        FILES: ${{ inputs.FILES }}
        USE_TEST_COLLECTION: ${{ inputs.USE_TEST_COLLECTION }}

      run: |

        configure_variables() {
          if [ "$USE_TEST_COLLECTION" = "y" ]; then
            COLLECTION="testSnippetMappings"
            ID_SUFFIX="testId"
          elif [ "$USE_TEST_COLLECTION" = "n" ]; then
            COLLECTION="snippetMappings"
            ID_SUFFIX="id"
          else 
            echo "Invalid value for USE_TEST_COLLECTION. Must be 'y' or 'n'."
            exit 1
          fi
        }

        generate_and_set_snippet_id() {
          local SNIPPET_NAME=$1
          
          echo "Document not found. Creating new document"
          RANDOM_ID=$(uuidgen)
          
          REQUEST_BODY=$(
           jq -n \
            --arg name "$SNIPPET_NAME" \
            --arg id "$RANDOM_ID" \
            '{
              fields: {
                name: {stringValue: $name},
                id: {stringValue: $id}
              }
            }'
          )
          
          POST_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/$COLLECTION?documentId=$SNIPPET_NAME"
          
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_BODY" \
            "$POST_URL"
          )
          
          SNIPPET_ID=$(echo "$RESPONSE" | jq -r '.fields.id.stringValue')
          SNIPPET_VARIABLE_NAME="${SNIPPET_NAME}_${ID_SUFFIX}"
          
          add_to_github_env "$SNIPPET_VARIABLE_NAME" "$SNIPPET_ID"
        }
        
        add_to_github_env() {
          local VARIABLE_NAME=$1 
          local VALUE=$2
          
          echo "$VARIABLE_NAME=$VALUE" >> $GITHUB_ENV
          echo "✅Added to GITHUB_ENV: $VARIABLE_NAME=$VALUE"
        }
        
        set_id_of_snippet() {
          local FILE_NAME="$1"
          SNIPPET_NAME=$(echo "$FILE" | sed -E 's|.*/||; s|\.swift$||' | awk '{print tolower(substr($0,1,1)) substr($0,2)}')
          ID_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/$COLLECTION/$SNIPPET_NAME"
          
          HTTP_RESPONSE=$(curl -s -w "%{http_code}" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              "$ID_URL")
              
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -c 4)
          RESPONSE=$(echo "$HTTP_RESPONSE" | sed '$ d')
           
          if [ "$HTTP_STATUS" -eq 200 ]; then 
            SNIPPET_ID=$(echo "$RESPONSE" | jq -r '.fields.id.stringValue')
            SNIPPET_VARIABLE_NAME="${SNIPPET_NAME}_${ID_SUFFIX}"
            add_to_github_env "$SNIPPET_VARIABLE_NAME" "$SNIPPET_ID"
            
          elif [ "$HTTP_STATUS" -eq 404 ]; then
            generate_and_set_snippet_id "$SNIPPET_NAME"

          else 
            echo "Unexpected HTTP status: $HTTP_STATUS"
            exit 1
          fi
        }
        
        IFS='\'
        
        configure_variables

        for FILE in $FILES; do
          if [ -f "$FILE" ]; then
            set_id_of_snippet $FILE
              
          else
            echo "❌File $FILE does not exist."
          fi
        done
