name: "Update Snippet Codes"
description: "Uploads or updates Firestore snippets based on changed files."
inputs:
  FILES:
    description: "A one-line string containing file paths to upload to Firestore, separated by backslashes."
    example: "PageHub/A.swift\PageHub/B.swift"
    required: true 
  USE_TEST_COLLECTION:
    description: "Value needed to distinguish the snippet ID suffix. Accepts 'y' or 'n'."
    required: true

runs:
  using: "composite"
  steps:
    - name: Process and Upload Files to Firestore
      shell: bash
      env:
        ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
        FIRESTORE_TEST_SNIPPETS_COLLECTION: ${{ env.FIRESTORE_TEST_SNIPPETS_COLLECTION }}
        FIRESTORE_CODEDETAILS_DOCUMENT: ${{ env.FIRESTORE_CODEDETAILS_DOCUMENT }}
        MIN_IOS_VERSION: ${{ env.MIN_IOS_VERSION }}
        FILES: ${{ inputs.FILES }}
        USE_TEST_COLLECTION: ${{ inputs.USE_TEST_COLLECTION }}

      run: |
        set_subsnippet_values() {
          local SUBSNIPPET_NAME=$1
          SUBSNIPPET_MAPPING_PATH=PageHub/Resources/SubsnippetMap/${SUBSNIPPET_NAME}.json

          if [[ -f "$SUBSNIPPET_MAPPING_PATH" ]]; then 
            SUBSNIPPETS_JSON=$(jq -c '.subsnippets' "$SUBSNIPPET_MAPPING_PATH")
            SUBSNIPPET_VALUES=$(echo "$SUBSNIPPETS_JSON" | jq -c '[.[] | {stringValue: .}]')
          fi
        }

        post_snippet() {
          local CODE="$1"
          local SUBSNIPPET="$2"

          REQUEST_BODY='{}'
          REQUEST_BODY=$(echo "$REQUEST_BODY" | \
            jq --arg codeValue "$CODE" \
              --argjson subsnippetValue "$SUBSNIPPET" '
              .fields.code.stringValue = $codeValue |
              .fields.subsnippets.arrayValue.values = $subsnippetValue
           ')

          curl -X POST \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              "$FIRESTORE_CREATE_URL" \
              -d "$REQUEST_BODY" || exit 1

          echo "✅ Snippet created with POST."
        }

        patch_snippet() {
          local CODE="$1"
          local SUBSNIPPET="$2"

          REQUEST_BODY=$(echo "$RESPONSE" | \
            jq --arg codeValue "$CODE" \
              --argjson subsnippetValue "$SUBSNIPPET" '
              .fields.code.stringValue = $codeValue |
              .fields.subsnippets.arrayValue.values = $subsnippetValue
            ')

          curl -X PATCH \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "$FIRESTORE_READ_UPDATE_URL" \
            -d "$REQUEST_BODY" || exit 1

          echo "✅ Snippet updated with PATCH."
        }
  
        IFS='\'

        for FILE in $FILES; do
          if [ -f "$FILE" ]; then
            DOCUMENT=$(echo "$FILE" | sed -E 's|.*/||; s|\.swift$||' | awk '{print tolower(substr($0,1,1)) substr($0,2)}')
            echo "Document name is $DOCUMENT"

            SUBSNIPPET_VALUES='[]'
            set_subsnippet_values $DOCUMENT

            # Delete lines that start with // (comments)
            # Escape backslash (\)
            CODE=$(sed -E '/^\/\//d; s/\\/\\\\/g' "$FILE")

            # Escape double quotes (")
            CODE=$(echo "$CODE" | sed -E 's/"/\\"/g')

            # Escape newline (\n)
            CODE=$(echo "$CODE" | sed -E ':a;N;$!ba;s/\n/\\n/g')

            SNIPPET_ID_VARIABLE=${DOCUMENT}_testId
            SNIPPET_ID=${!SNIPPET_ID_VARIABLE}

            FIRESTORE_READ_UPDATE_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/$FIRESTORE_TEST_SNIPPETS_COLLECTION/$SNIPPET_ID/versions/$MIN_IOS_VERSION"
            FIRESTORE_CREATE_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/$FIRESTORE_TEST_SNIPPETS_COLLECTION/$SNIPPET_ID/versions?documentId=$MIN_IOS_VERSION"

            echo "URL: "$FIRESTORE_READ_UPDATE_URL""

            HTTP_RESPONSE=$(curl -s \
              -w "%{http_code}" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              "$FIRESTORE_READ_UPDATE_URL")

            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -c 4)
            RESPONSE=$(echo "$HTTP_RESPONSE" | sed '$ d')

            echo "Response: $RESPONSE"
            echo "HTTP_STATUS: $HTTP_STATUS"

            if [ "$HTTP_STATUS" -eq 200 ]; then
              patch_snippet "$CODE" "$SUBSNIPPET_VALUES"
            else
              post_snippet "$CODE" "$SUBSNIPPET_VALUES"
            fi
          else
            echo "❌ File $FILE does not exist."
          fi
        done
