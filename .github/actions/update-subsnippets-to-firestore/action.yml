name: "Update Subsnippets to Firestore"
runs:
  using: "composite"
  steps:
    - name: Process and Upload Files to Firestore
      shell: bash
      env:
        ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
        FIRESTORE_SNIPPETS_COLLECTION: ${{ env.FIRESTORE_SNIPPETS_COLLECTION }}
        FIRESTORE_SUBSNIPPETS_DOCUMENT: ${{ env.FIRESTORE_SUBSNIPPETS_DOCUMENT }}
        MIN_IOS_VERSION: ${{ env.MIN_IOS_VERSION }}

       
        # A list of files containing information about the sub-snippets to be updated, including their directory paths
        SUBSNIPPET_MAP_FILES: ${{ env.SUBSNIPPET_MAP_FILES }}

      run: |
        # Splits the file list based on ‘\n’.
        IFS=$'\n'
        
        for FILE in $SUBSNIPPET_MAP_FILES; do 
          if [ -f "$FILE" ]; then 
            SNIPPET=$(echo "$FILE" | sed -E 's|.*/||; s|\.json$||' | awk '{print tolower(substr($0,1,1)) substr($0,2)}')

            echo "Snippet name is $SNIPPET"

            SNIPPET_ID_VARIABLE=${SNIPPET}_id
            SNIPPET_ID=${!SNIPPET_ID_VARIABLE}

            FIRESTORE_SNIPPET_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/$FIRESTORE_SNIPPETS_COLLECTION/$SNIPPET_ID/versions/$MIN_IOS_VERSION"

            echo "GET URL: $FIRESTORE_SNIPPET_URL"

            # Check if the sub-snippet to be updated exists
            HTTP_RESPONSE=$(curl -s \
              -w "%{http_code}" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              "$FIRESTORE_SNIPPET_URL")

            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -c 4)
            RESPONSE=$(echo "$HTTP_RESPONSE" | sed '$ d')

            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "The given snippet exist"

              #tmp 
              jq '.' "$FILE"
              
              SUBSNIPPETS_JSON=$(jq -c '.subsnippets' "$FILE")

              #tmp 
              echo "SUBSNIPPETS_JSON: $SUBSNIPPETS_JSON"

              SUBSNIPPET_VALUES=$(echo "$SUBSNIPPETS_JSON" | jq -c '[.[] | {stringValue: .}]')

              # tmp 
              echo "SUBSNIPPET_VALUES: $SUBSNIPPET_VALUES"
              REQUEST_BODY=$(echo "$RESPONSE" | jq --argjson subsnippets "$SUBSNIPPET_VALUES" '.fields.subsnippets.arrayValue.values = $subsnippets')

              # tmp 
              echo "REQUEST_BODY: $REQUEST_BODY"

              curl -X PATCH \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                "$FIRESTORE_SNIPPET_URL" \
                -d "$REQUEST_BODY" || exit 1  


            else
              echo "The given snippet does not exist"
              exit 1
            fi

          else 
            echo "File $FILE does not exist." 
          fi
        done


                


