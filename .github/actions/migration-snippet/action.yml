name: "Migrating Snippet"
description: "Migration Snippets: Transitioning from Test to Production Service"

runs:
  using: "composite"
  steps:
    - name: Process and Upload Files to Firestore
      shell: bash
      env:
        # The Authorization token information to be included in the curl header.
        ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}

        CHANGED_FILES: ${{ env.CHANGED_FILES }}
        MIN_IOS_VERSION: ${{ env.MIN_IOS_VERSION }}

        # The following values are to be included in the curl URL.
        FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}

      run: |
    
        JSON_FILE="response.json"
        SNIPPET_JSON="version.json"

        post_to_product() {
          local URL="$1"
          local REQUEST_BODY="$2"

          echo "Attempting a POST request."

          curl -X POST \
            -f \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "$URL" \
            -d "$REQUEST_BODY" || exit 1

          echo "Document created with POST."
        }

        patch_product_data() {
          local URL="$1"
          local REQUEST_BODY="$2"

          echo "Attempting a PATCH request."

          curl -X PATCH \
            -f \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "$URL" \
            -d "$REQUEST_BODY" || exit 1
            
          echo "Document updated with PATCH."
        }

        make_test_response_json_file() {
          local SNIPPET_NAME="$1"
          local SNIPPET_ID="${SNIPPET_NAME}_testId"
          local SNIPPET_ID_VALUE=${!SNIPPET_ID}

          TEST_SNIPPET_VERSION_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/testSnippets/$SNIPPET_ID_VALUE/versions/$MIN_IOS_VERSION"

          echo "TEST_SNIPPET_VERSION_URL: $TEST_SNIPPET_VERSION_URL"

          curl -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "$TEST_SNIPPET_VERSION_URL" \
            -o $JSON_FILE \
            -f || exit 1
        }

        update_snippets_by_json_file() {
          local SNIPPET_NAME="$1"
            
          PRODUCT_SNIPPET_ID="${SNIPPET_NAME}_id"
          PRODUCT_SNIPPET_ID_VALUE=${!PRODUCT_SNIPPET_ID}

          PRODUCT_SNIPPET_GET_PATCH_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/snippets/$PRODUCT_SNIPPET_ID_VALUE/versions/$MIN_IOS_VERSION"
          PRODUCT_SNIPPET_POST_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/snippets/$PRODUCT_SNIPPET_ID_VALUE/versions?documentId=$MIN_IOS_VERSION"

          echo "[RESPONSE_JSON_FILE]"
          cat "$JSON_FILE"

          FIELDS=$(jq -c '.fields' "$JSON_FILE")

          echo "FIELDS"
          echo "$FIELDS"

          REQUEST_BODY=$(jq -n --argjson fields "$FIELDS" '{
            "fields": $fields
          }')


          echo "PATCH URL: $PRODUCT_SNIPPET_GET_PATCH_URL"
          echo "POST URL: $PRODUCT_SNIPPET_POST_URL"

          echo "REQUEST_BODY"
          echo "$REQUEST_BODY" | jq .

          STATUS=$(curl -X GET \
            -o /dev/null \
            -w "%{http_code}" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "$PRODUCT_SNIPPET_GET_PATCH_URL")

          if [ "$STATUS" -eq 200 ]; then
            patch_product_data "$PRODUCT_SNIPPET_GET_PATCH_URL" "$REQUEST_BODY"
          else
            post_to_product "$PRODUCT_SNIPPET_POST_URL" "$REQUEST_BODY"
          fi    
        } 

        migrate_versioned_snippet() {
          local SNIPPET_NAME="$1"

          echo "::group::Migrating versioned snippet: $SNIPPET_NAME"
          make_test_response_json_file $SNIPPET_NAME
          update_snippets_by_json_file $SNIPPET_NAME
          echo "::endgroup::"
        }

        update_snippet() {
          local SNIPPET_NAME="$1"

          echo "Update Snippet"
            
          PRODUCT_SNIPPET_ID="${SNIPPET_NAME}_id"
          PRODUCT_SNIPPET_ID_VALUE=${!PRODUCT_SNIPPET_ID}

          PRODUCT_SNIPPET_GET_PATCH_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/snippets/$PRODUCT_SNIPPET_ID_VALUE"
          PRODUCT_SNIPPET_POST_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/snippets?documentId=$PRODUCT_SNIPPET_ID_VALUE"

          echo "[RESPONSE_JSON_FILE]"
          cat "$SNIPPET_JSON"

          FIELDS=$(jq -c '.fields' "$SNIPPET_JSON")

          echo "FIELDS"
          echo "$FIELDS"

          REQUEST_BODY=$(jq -n --argjson fields "$FIELDS" '{
            "fields": $fields
          }')


          echo "PATCH URL: $PRODUCT_SNIPPET_GET_PATCH_URL"
          echo "POST URL: $PRODUCT_SNIPPET_POST_URL"

          echo "REQUEST_BODY"
          echo "$REQUEST_BODY" | jq .

          STATUS=$(curl -X GET \
            -o /dev/null \
            -w "%{http_code}" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "$PRODUCT_SNIPPET_GET_PATCH_URL")

          if [ "$STATUS" -eq 200 ]; then
            patch_product_data "$PRODUCT_SNIPPET_GET_PATCH_URL" "$REQUEST_BODY"
          else
            post_to_product "$PRODUCT_SNIPPET_POST_URL" "$REQUEST_BODY"
          fi    
        } 

        make_snippet_json() {
          local SNIPPET_NAME="$1"
          
          local SNIPPET_ID="${SNIPPET_NAME}_testId"
          local SNIPPET_ID_VALUE=${!SNIPPET_ID}

          echo "Make Snippet JSON"

          TEST_SNIPPET_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/testSnippets/$SNIPPET_ID_VALUE"

          echo "TEST_SNIPPET_URL: $TEST_SNIPPET_URL"

          curl -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "$TEST_SNIPPET_URL" \
            -o $SNIPPET_JSON \
            -f

          if [ $? -ne 0]; then 
            echo "::error::Failed to fetch snippet from $TEST_SNIPPET_URL. Please check the URL or the access token."
            exit 1
          else 
            echo "::notice::Snippet successfully fetched and saved to $SNIPPET_JSON."
          fi
        }

        migrate_snippet() {
          local SNIPPET_NAME="$1"

          echo "::group::Migrating snippet: $SNIPPET_NAME"

          make_snippet_json $SNIPPET_NAME
          update_snippet $SNIPPET_NAME

          echo "::endgroup::"
        }

        # Exit action if CHANGED_FILES is Empty
        if [ -z "$CHANGED_FILES" ]; then 
          exit 0 
        fi

        IFS='\'

        for FILE in $CHANGED_FILES; do
          SNIPPET_NAME=$(echo "$FILE" | sed -E 's|.*/||; s|\.swift$||' | awk '{print tolower(substr($0,1,1)) substr($0,2)}')
          
          echo "SNIPPET_NAME: $SNIPPET_NAME"

          migrate_snippet $SNIPPET_NAME
          migrate_versioned_snippet $SNIPPET_NAME
        done
     